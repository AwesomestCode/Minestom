package com.minestom.code_generation.fluid;

import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.minestom.code_generation.MinestomCodeGenerator;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Collections;
import java.util.Objects;

public final class FluidGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(FluidGenerator.class);
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final File DEFAULT_INPUT_FILE = new File(DEFAULT_SOURCE_FOLDER_ROOT + "/json", "fluids.json");
    private final File fluidsFile;
    private final File outputFolder;

    public FluidGenerator() {
        this(null, null);
    }

    public FluidGenerator(@Nullable File fluidsFile) {
        this(fluidsFile, null);
    }

    public FluidGenerator(@Nullable File fluidsFile, @Nullable File outputFolder) {
        this.fluidsFile = Objects.requireNonNullElse(fluidsFile, DEFAULT_INPUT_FILE);
        this.outputFolder = Objects.requireNonNullElse(outputFolder, DEFAULT_OUTPUT_FOLDER);
    }

    @Override
    public void generate() {
        if (!fluidsFile.exists()) {
            LOGGER.error("Failed to find fluids.json.");
            LOGGER.error("Stopped code generation for fluids.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }
        // Important classes we use alot
        ClassName namespaceIDClassName = ClassName.get("net.minestom.server.utils", "NamespaceID");

        JsonArray fluids;
        try {
            fluids = GSON.fromJson(new JsonReader(new FileReader(fluidsFile)), JsonArray.class);
        } catch (FileNotFoundException e) {
            LOGGER.error("Failed to find fluids.json.");
            LOGGER.error("Stopped code generation for fluids.");
            return;
        }
        ClassName fluidClassName = ClassName.get("net.minestom.server.fluid", "Fluid");

        // Particle
        TypeSpec.Builder fluidClass = TypeSpec.classBuilder(fluidClassName)
                .addSuperinterface(ClassName.get("net.kyori.adventure.key", "Keyed"))
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED");
        fluidClass.addField(
                FieldSpec.builder(namespaceIDClassName, "id")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build()
        );
        fluidClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(namespaceIDClassName, "id").addAnnotation(NotNull.class).build())
                        .addStatement("this.id = id")
                        .addModifiers(Modifier.PROTECTED)
                        .build()
        );
        // Override key method (adventure)
        fluidClass.addMethod(
                MethodSpec.methodBuilder("key")
                        .returns(ClassName.get("net.kyori.adventure.key", "Key"))
                        .addAnnotation(Override.class)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getId method
        fluidClass.addMethod(
                MethodSpec.methodBuilder("getId")
                        .returns(namespaceIDClassName)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // Use data
        for (JsonElement f : fluids) {
            JsonObject fluid = f.getAsJsonObject();

            String itemName = fluid.get("name").getAsString();

            fluidClass.addField(
                    FieldSpec.builder(
                            fluidClassName,
                            itemName
                    ).initializer(
                            "new $T($T.from($S))",
                            fluidClassName,
                            namespaceIDClassName,
                            fluid.get("id").getAsString()
                    ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
            );
        }

        // Write files to outputFolder
        writeFiles(
                Collections.singletonList(
                        JavaFile.builder("net.minestom.server.fluid", fluidClass.build()).build()
                ),
                outputFolder
        );
    }
}
