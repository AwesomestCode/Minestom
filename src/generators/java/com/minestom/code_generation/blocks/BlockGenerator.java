package com.minestom.code_generation.blocks;

import com.google.gson.*;
import com.google.gson.stream.JsonReader;
import com.minestom.code_generation.MinestomCodeGenerator;
import com.minestom.code_generation.util.NameUtil;
import com.squareup.javapoet.*;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.lang.model.element.Modifier;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public final class BlockGenerator extends MinestomCodeGenerator {
    private static final Logger LOGGER = LoggerFactory.getLogger(BlockGenerator.class);
    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
    private static final File DEFAULT_INPUT_FILE = new File(DEFAULT_SOURCE_FOLDER_ROOT + "/json", "blocks.json");
    private final File blocksFile;
    private final File outputFolder;

    public BlockGenerator() {
        this(null, null);
    }

    public BlockGenerator(@Nullable File blocksFile) {
        this(blocksFile, null);
    }

    public BlockGenerator(@Nullable File blocksFile, @Nullable File outputFolder) {
        this.blocksFile = Objects.requireNonNullElse(blocksFile, DEFAULT_INPUT_FILE);
        this.outputFolder = Objects.requireNonNullElse(outputFolder, DEFAULT_OUTPUT_FOLDER);
    }

    @Override
    public void generate() {
        if (!blocksFile.exists()) {
            LOGGER.error("Failed to find blocks.json.");
            LOGGER.error("Stopped code generation for blocks.");
            return;
        }
        if (!outputFolder.exists() && !outputFolder.mkdirs()) {
            LOGGER.error("Output folder for code generation does not exist and could not be created.");
            return;
        }
        // Important classes we use alot
        ClassName namespaceIDClassName = ClassName.get("net.minestom.server.utils", "NamespaceID");

        List<JavaFile> filesToWrite = new ArrayList<>();

        JsonArray blocks;
        try {
            blocks = GSON.fromJson(new JsonReader(new FileReader(blocksFile)), JsonArray.class);
        } catch (FileNotFoundException e) {
            LOGGER.error("Failed to find blocks.json.");
            LOGGER.error("Stopped code generation for blocks.");
            return;
        }
        ClassName blockClassName = ClassName.get("net.minestom.server.instance.block", "Block");
        ClassName blockStateClassName = ClassName.get("net.minestom.server.instance.block", "BlockState");

        // Block
        TypeSpec.Builder blockClass = TypeSpec.classBuilder(blockClassName)
                .addSuperinterface(ClassName.get("net.kyori.adventure.key", "Keyed"))
                .addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED");
        blockClass.addField(
                FieldSpec.builder(namespaceIDClassName, "id")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build()
        );
        blockClass.addField(
                FieldSpec.builder(TypeName.SHORT, "defaultBlockState")
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL).build()
        );
        blockClass.addField(
                FieldSpec.builder(ParameterizedTypeName.get(ClassName.get("java.util", "List"), blockStateClassName), "blockStates")
                        .initializer("new $T<>()", ClassName.get("java.util", "ArrayList"))
                        .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                        .addAnnotation(NotNull.class)
                        .build()
        );
        // Block constructor
        blockClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(ParameterSpec.builder(namespaceIDClassName, "id").addAnnotation(NotNull.class).build())
                        .addParameter(TypeName.SHORT, "defaultBlockState")

                        .addStatement("this.id = id")
                        .addStatement("this.defaultBlockState = defaultBlockState")
                        .addModifiers(Modifier.PROTECTED)
                        .build()
        );
        // Override key method (adventure)
        blockClass.addMethod(
                MethodSpec.methodBuilder("key")
                        .returns(ClassName.get("net.kyori.adventure.key", "Key"))
                        .addAnnotation(Override.class)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // addBlockState method
        blockClass.addMethod(
                MethodSpec.methodBuilder("addBlockState")
                        .addParameter(ParameterSpec.builder(blockStateClassName, "blockState").addAnnotation(NotNull.class).build())

                        .addStatement("this.blockStates.add(blockState)")
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                        .build()
        );
        // getId method
        blockClass.addMethod(
                MethodSpec.methodBuilder("getId")
                        .returns(namespaceIDClassName)
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.id")
                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );
        // getBlockStates method
        blockClass.addMethod(
                MethodSpec.methodBuilder("getBlockStates")
                        .returns(ParameterizedTypeName.get(ClassName.get(List.class), blockStateClassName))
                        .addAnnotation(NotNull.class)
                        .addStatement("return this.blockStates")
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL) // Should this be final, for now I guess so.
                        .build()
        );

        // BlockState
        TypeSpec.Builder blockStateClass = TypeSpec.classBuilder(blockStateClassName).addModifiers(Modifier.PUBLIC).addJavadoc("AUTOGENERATED");
        blockStateClass.addField(FieldSpec.builder(TypeName.SHORT, "id").addModifiers(Modifier.PRIVATE, Modifier.FINAL).build());
        blockStateClass.addField(FieldSpec.builder(blockClassName, "block").addModifiers(Modifier.PRIVATE, Modifier.FINAL).addAnnotation(NotNull.class).build());
        // BlockState constructor
        blockStateClass.addMethod(
                MethodSpec.constructorBuilder()
                        .addParameter(TypeName.SHORT, "id")
                        .addParameter(ParameterSpec.builder(blockClassName, "block").addAnnotation(NotNull.class).build())

                        .addStatement("this.id = id")
                        .addStatement("this.block = block")

                        .addModifiers(Modifier.PUBLIC)
                        .build()
        );

        // For static initStates
        CodeBlock.Builder staticBlock = CodeBlock.builder();

        // Use data
        for (JsonElement b : blocks) {
            JsonObject block = b.getAsJsonObject();

            String blockName = block.get("name").getAsString();

            blockClass.addField(
                    FieldSpec.builder(
                            blockClassName,
                            blockName
                    ).initializer(
                            "new $T($T.from($S), (short) $L)",
                            blockClassName,
                            namespaceIDClassName,
                            block.get("id").getAsString(),
                            block.get("defaultBlockState").getAsInt()
                    ).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL).build()
            );

            JsonArray states = block.get("states").getAsJsonArray();

            ClassName blockStateSpecificClassName = ClassName.get(
                    "net.minestom.server.instance.block.states",
                    NameUtil.convertSnakeCaseToCamelCase(blockName.toLowerCase())
            );

            // Common blockStateSpecificClass structure
            TypeSpec.Builder blockStateSpecificClass = TypeSpec.classBuilder(blockStateSpecificClassName)
                    .addAnnotation(
                            AnnotationSpec.builder(Deprecated.class)
                                    .addMember("since", "$S", "forever")
                                    .addMember("forRemoval", "$L", false).build()
                    )
                    .addModifiers(Modifier.PUBLIC, Modifier.FINAL).addJavadoc("AUTOGENERATED");
            // initStates method
            MethodSpec.Builder initStatesMethod = MethodSpec.methodBuilder("initStates")
                    .addModifiers(Modifier.PUBLIC, Modifier.STATIC);

            for (JsonElement s : states) {
                JsonObject state = s.getAsJsonObject();
                // Add field to initStates method
                initStatesMethod.addStatement(
                        "Block.$N.addBlockState(new $T((short) $L, $T.$N))",
                        blockName,
                        blockStateClassName,
                        state.get("id").getAsShort(),
                        blockClassName,
                        blockName
                );
            }
            // Add initStates Method
            blockStateSpecificClass.addMethod(initStatesMethod.build());

            // Add initStates method refence to static block
            staticBlock.addStatement("$T.initStates()", blockStateSpecificClassName);

            // Add BlockStates to list of files we need to write:
            filesToWrite.add(JavaFile.builder("net.minestom.server.instance.block.states", blockStateSpecificClass.build()).build());
        }
        blockClass.addStaticBlock(staticBlock.build());
        // Add ignore deprecations annotation
        blockClass.addAnnotation(AnnotationSpec.builder(SuppressWarnings.class).addMember("value", "$S", "deprecation").build());


        // Add Block & BlockState to list of files we need to write:
        filesToWrite.add(JavaFile.builder("net.minestom.server.instance.block", blockClass.build()).build());
        filesToWrite.add(JavaFile.builder("net.minestom.server.instance.block", blockStateClass.build()).build());

        // Write files to outputFolder
        writeFiles(filesToWrite, outputFolder);
    }
}
